shiny::runApp('S:/Institutional Research/Chen/visualdev/radar chart')
shiny::runApp('S:/Institutional Research/Chen/visualdev/radar chart')
shiny::runApp('S:/Institutional Research/Chen/visualdev/radar chart')
source("S:/Institutional Research/Chen/R setup/ODBC Connection.R")
#for short name of college
COLLNM <- sqlFetch(SISInfo, 'COLLEGE')
PAG <- sqlQuery(MSUEDW, "select distinct Pid, GRADUATING_COHORT, COLLEGE_FIRST,  COLLEGE_DEGREE,
MAJOR_FIRST_SEMESTER, MAJOR_NAME_FIRST, MAJOR_DEGREE, MAJOR_NAME_DEGREE
from OPB_PERS_FALL.PERSISTENCE_V
where student_level='UN' and level_entry_status='FRST' and (ENTRANT_SUMMER_FALL='Y' or substr(ENTRY_TERM_CODE,1,1)='F')
and  GRADUATING_COHORT in ('2015-2016','2014-2015','2013-2014','2012-2013','2011-2012')
PAG <- sqlQuery(MSUEDW, "select distinct Pid, GRADUATING_COHORT, COLLEGE_FIRST,  COLLEGE_DEGREE,
MAJOR_FIRST_SEMESTER, MAJOR_NAME_FIRST, MAJOR_DEGREE, MAJOR_NAME_DEGREE
from OPB_PERS_FALL.PERSISTENCE_V
where student_level='UN' and level_entry_status='FRST' and (ENTRANT_SUMMER_FALL='Y' or substr(ENTRY_TERM_CODE,1,1)='F')
and  GRADUATING_COHORT in ('2015-2016','2014-2015','2013-2014','2012-2013','2011-2012'))
source("S:/Institutional Research/Chen/R setup/ODBC Connection.R")
#for short name of college
PAG <- sqlQuery(MSUEDW, "select distinct Pid, GRADUATING_COHORT, COLLEGE_FIRST,  COLLEGE_DEGREE,
MAJOR_FIRST_SEMESTER, MAJOR_NAME_FIRST, MAJOR_DEGREE, MAJOR_NAME_DEGREE
from OPB_PERS_FALL.PERSISTENCE_V
where student_level='UN' and level_entry_status='FRST' and (ENTRANT_SUMMER_FALL='Y' or substr(ENTRY_TERM_CODE,1,1)='F')
and  GRADUATING_COHORT in ('2015-2016','2014-2015','2013-2014','2012-2013','2011-2012')")
tapply(PAG$PID, PAG$GRADUATING_COHORT, count)
tapply(PAG$PID, PAG$GRADUATING_COHORT, nrow)
tapply(PAG, PAG$GRADUATING_COHORT, nrow)
tapply(PAG$PID, PAG$GRADUATING_COHORT, length)
library(sqldf)
PAG <- sqldf("select a.*, b.Short_Name as COLLEGE_FIRST_NAME, c.Short_Name as COLLEGE_DEGREE_NAME
from PAG a
left join COLLNM b
on a.COLLEGE_FIRST=b.Coll_Code
left join COLLNM c
on a.COLLEGE_DEGREE=c.Coll_Code")
degrcoll <- unique(PAG$COLLEGE_DEGREE)
degrcoll
data <-PAG[PAG$COLLEGE_DEGREE==10,]
sum(is.na(PAG$MAJOR_DEGREE))
sum(is.na(PAG$MAJOR_FIRST_SEMESTER))
sum(is.na(PAG$COLLEGE_DEGREE))
sum(is.na(PAG$MAJOR_NAME_DEGREE))
data$COLLEGE_FIRST_NAME <- paste(data$COLLEGE_FIRST, data$COLLEGE_FIRST_NAME, sep = "-")
data$MAJOR_NAME_FIRST <- paste(data$MAJOR_FIRST_SEMESTER, data$MAJOR_NAME_FIRST, sep = "-")
data$COLLEGE_DEGREE_NAME <- paste(data$COLLEGE_DEGREE, data$COLLEGE_DEGREE_NAME, sep = "-")
data$MAJOR_NAME_DEGREE <- paste(data$MAJOR_DEGREE, data$MAJOR_NAME_DEGREE, sep = "-")
Agg1 <- data %>% group_by(COHORT, COLLEGE_FIRST_NAME,COLLEGE_DEGREE_NAME ) %>% summarise(count=n())
Agg2 <- data %>% group_by(COHORT, COLLEGE_FIRST_NAME,COLLEGE_DEGREE_NAME, MAJOR_NAME_FIRST,  MAJOR_NAME_DEGREE) %>% summarise(count=n())
Agg3 <- data %>% group_by(COHORT,  MAJOR_NAME_FIRST,  MAJOR_NAME_DEGREE) %>% summarise(count=n())
Agg4 <- data %>% group_by(COHORT, COLLEGE_FIRST_NAME,  MAJOR_NAME_DEGREE) %>% summarise(count=n())
Agg5 <- data %>% group_by(COHORT, MAJOR_NAME_FIRST,  COLLEGE_DEGREE_NAME) %>% summarise(count=n())
library(dplyr)
Agg1 <- data %>% group_by(COHORT, COLLEGE_FIRST_NAME,COLLEGE_DEGREE_NAME ) %>% summarise(count=n())
Agg2 <- data %>% group_by(COHORT, COLLEGE_FIRST_NAME,COLLEGE_DEGREE_NAME, MAJOR_NAME_FIRST,  MAJOR_NAME_DEGREE) %>% summarise(count=n())
Agg3 <- data %>% group_by(COHORT,  MAJOR_NAME_FIRST,  MAJOR_NAME_DEGREE) %>% summarise(count=n())
Agg4 <- data %>% group_by(COHORT, COLLEGE_FIRST_NAME,  MAJOR_NAME_DEGREE) %>% summarise(count=n())
Agg5 <- data %>% group_by(COHORT, MAJOR_NAME_FIRST,  COLLEGE_DEGREE_NAME) %>% summarise(count=n())
Agg1 <- data %>% group_by(GRADUATING_COHORT, COLLEGE_FIRST_NAME,COLLEGE_DEGREE_NAME ) %>% summarise(count=n())
Agg2 <- data %>% group_by(GRADUATING_COHORT, COLLEGE_FIRST_NAME,COLLEGE_DEGREE_NAME, MAJOR_NAME_FIRST,  MAJOR_NAME_DEGREE) %>% summarise(count=n())
Agg3 <- data %>% group_by(GRADUATING_COHORT,  MAJOR_NAME_FIRST,  MAJOR_NAME_DEGREE) %>% summarise(count=n())
Agg4 <- data %>% group_by(GRADUATING_COHORT, COLLEGE_FIRST_NAME,  MAJOR_NAME_DEGREE) %>% summarise(count=n())
Agg5 <- data %>% group_by(GRADUATING_COHORT, MAJOR_NAME_FIRST,  COLLEGE_DEGREE_NAME) %>% summarise(count=n())
DS1<- sqldf("select distinct   COLLEGE_DEGREE_NAME as coll,  MAJOR_NAME_DEGREE as mjr
from Agg2
union
select distinct COLLEGE_FIRST_NAME , MAJOR_NAME_FIRST
from Agg2")
View(DS1)
t<- split(DS1, DS1$coll)
listf <- function(x){ c(unique(x$coll),x$mjr)}
test <- sapply(t, listf)
listall <- as.data.frame(do.call(c,test))
View(listall)
colnames(listall) <- "Org"
listall$merge <-1
DS2 <- sqldf("select a.org, b.org as org1
from listall a, listall b
on 1=1
")
View(DS2)
lvl <- unique(DS2$org1)
lvl
levels(DS2$Org) <- lvl
DS2$org1 <- as.factor(DS2$org1)
levels(DS2$org1) <- lvl
names(Agg3)<-names(Agg1)
names(Agg4) <- names(Agg1)
names(Agg5) <- names(Agg1)
mainds <- rbind(Agg1, Agg3, Agg4, Agg5)
cohortseq <- unique(mainds$GRADUATING_COHORT)
cohortseq
DS2_2011_15 <- sqldf("select  a.org, a.org1, (case when b.count is null then 0 else b.count end) as count
from DS2 a
left join mainds b
on a.org=COLLEGE_DEGREE_NAME and a.org1=COLLEGE_FIRST_NAME  ")
View(DS2_2011_15)
xtb_2011_15 <- xtabs(count ~ Org + org1,data=DS2_2011_15)
vec_2011_15<-vector()
for(i in  seq(nrow(xtb_2011_15))) {
x<-c(xtb_2011_15[nrow(xtb_2011_15)+1-i,])
names(x)<-NULL
vec_2011_15<-rbind(x,vec_2011_15)
}
vec_2011_15[1]
head(DS2_2011_15)
vec <- list("All"=vec_2011_15)
cohortseq
for (j in cohortseq){
mds_2009 <- mainds%>% filter(COHORT==j)
DS2_2009 <- sqldf("select  a.org, a.org1, (case when b.count is null then 0 else b.count end) as count
from DS2 a
left join mds_2009 b
on  a.org=COLLEGE_DEGREE_NAME and a.org1=COLLEGE_FIRST_NAME  ")
xtb_2009 <- xtabs(count ~ Org + org1,data=DS2_2009)
vec_2009<-vector()
for(i in  seq(nrow(xtb_2009))) {
x<-c(xtb_2009[nrow(xtb_2009)+1-i,])
names(x)<-NULL
vec_2009<-rbind(x,vec_2009)
curlist <- list(vec_2009)
names(curlist) <- j
}
vec <- c(vec,curlist)
}
for (j in cohortseq){
mds_2009 <- mainds%>% filter(GRADUATING_COHORT==j)
DS2_2009 <- sqldf("select  a.org, a.org1, (case when b.count is null then 0 else b.count end) as count
from DS2 a
left join mds_2009 b
on  a.org=COLLEGE_DEGREE_NAME and a.org1=COLLEGE_FIRST_NAME  ")
xtb_2009 <- xtabs(count ~ Org + org1,data=DS2_2009)
vec_2009<-vector()
for(i in  seq(nrow(xtb_2009))) {
x<-c(xtb_2009[nrow(xtb_2009)+1-i,])
names(x)<-NULL
vec_2009<-rbind(x,vec_2009)
curlist <- list(vec_2009)
names(curlist) <- j
}
vec <- c(vec,curlist)
}
vec[2]
coll <- unique(DS1$coll)
coll
regionnum <- sapply(coll, function(x){ which(lvl== x)-1})
names(regionnum) <- NULL
regionnum
names <- lvl
list <- list("names"=names, "regions"=regionnum, "matrix"=vec)
setwd("H:/GitHub/NSSC degr declared to first Mjr/json")
k=10
require(RJSONIO)
jsonOut<-toJSON(list)
#cat(jsonOut)
sink(paste('data',k, '.json', collapse ='', sep=""))
cat(jsonOut)
sink()
cohortseq
m <- cohortseq
m <- cohortseq[1]
m
substr(m,1,4)
paste(substr(m,1,4), substr(m,8,9))
paste(substr(m,1,4), substr(m,8,9), sep = "-")
rm(vec)
#loop through each graduating cohort
vec <- list("All"=vec_2011_15)
for (j in cohortseq){
mds_2009 <- mainds%>% filter(GRADUATING_COHORT==j)
DS2_2009 <- sqldf("select  a.org, a.org1, (case when b.count is null then 0 else b.count end) as count
from DS2 a
left join mds_2009 b
on  a.org=COLLEGE_DEGREE_NAME and a.org1=COLLEGE_FIRST_NAME  ")
xtb_2009 <- xtabs(count ~ Org + org1,data=DS2_2009)
vec_2009<-vector()
for(i in  seq(nrow(xtb_2009))) {
x<-c(xtb_2009[nrow(xtb_2009)+1-i,])
names(x)<-NULL
vec_2009<-rbind(x,vec_2009)
curlist <- list(vec_2009)
names(curlist) <- paste(substr(j,1,4), substr(j,8,9), sep = "-")
}
vec <- c(vec,curlist)
}
list <- list("names"=names, "regions"=regionnum, "matrix"=vec)
require(RJSONIO)
jsonOut<-toJSON(list)
#cat(jsonOut)
sink(paste('data',k, '.json', collapse ='', sep=""))
cat(jsonOut)
sink()
rm(list = ls())
source("S:/Institutional Research/Chen/R setup/ODBC Connection.R")
#for short name of college
COLLNM <- sqlFetch(SISInfo, 'COLLEGE')
PAG <- sqlQuery(MSUEDW, "select distinct Pid, GRADUATING_COHORT, COLLEGE_FIRST,  COLLEGE_DEGREE,
MAJOR_FIRST_SEMESTER, MAJOR_NAME_FIRST, MAJOR_DEGREE, MAJOR_NAME_DEGREE
from OPB_PERS_FALL.PERSISTENCE_V
where student_level='UN' and level_entry_status='FRST' and (ENTRANT_SUMMER_FALL='Y' or substr(ENTRY_TERM_CODE,1,1)='F')
and  GRADUATING_COHORT in ('2015-2016','2014-2015','2013-2014','2012-2013','2011-2012')")
#use the short college name
library(sqldf)
PAG <- sqldf("select a.*, b.Short_Name as COLLEGE_FIRST_NAME, c.Short_Name as COLLEGE_DEGREE_NAME
from PAG a
left join COLLNM b
on a.COLLEGE_FIRST=b.Coll_Code
left join COLLNM c
on a.COLLEGE_DEGREE=c.Coll_Code")
#build loop around the degree college
degrcoll <- unique(PAG$COLLEGE_DEGREE)
#loop through each degree college
for (k in firstcoll){
data <- PAG[PAG$COLLEGE_DEGREE==k,]
#concate to prevent same character
data$COLLEGE_FIRST_NAME <- paste(data$COLLEGE_FIRST, data$COLLEGE_FIRST_NAME, sep = "-")
data$MAJOR_NAME_FIRST <- paste(data$MAJOR_FIRST_SEMESTER, data$MAJOR_NAME_FIRST, sep = "-")
data$COLLEGE_DEGREE_NAME <- paste(data$COLLEGE_DEGREE, data$COLLEGE_DEGREE_NAME, sep = "-")
data$MAJOR_NAME_DEGREE <- paste(data$MAJOR_DEGREE, data$MAJOR_NAME_DEGREE, sep = "-")
#aggregation
library(dplyr)
Agg1 <- data %>% group_by(GRADUATING_COHORT, COLLEGE_FIRST_NAME,COLLEGE_DEGREE_NAME ) %>% summarise(count=n())
Agg2 <- data %>% group_by(GRADUATING_COHORT, COLLEGE_FIRST_NAME,COLLEGE_DEGREE_NAME, MAJOR_NAME_FIRST,  MAJOR_NAME_DEGREE) %>% summarise(count=n())
Agg3 <- data %>% group_by(GRADUATING_COHORT,  MAJOR_NAME_FIRST,  MAJOR_NAME_DEGREE) %>% summarise(count=n())
Agg4 <- data %>% group_by(GRADUATING_COHORT, COLLEGE_FIRST_NAME,  MAJOR_NAME_DEGREE) %>% summarise(count=n())
Agg5 <- data %>% group_by(GRADUATING_COHORT, MAJOR_NAME_FIRST,  COLLEGE_DEGREE_NAME) %>% summarise(count=n())
#gather all college and major from 2 time points
DS1<- sqldf("select distinct   COLLEGE_DEGREE_NAME as coll,  MAJOR_NAME_DEGREE as mjr
from Agg2
union
select distinct COLLEGE_FIRST_NAME , MAJOR_NAME_FIRST
from Agg2")
#for each college, build college following by majors within that college list
t<- split(DS1, DS1$coll)
listf <- function(x){ c(unique(x$coll),x$mjr)}
test <- sapply(t, listf)
listall <- as.data.frame(do.call(c,test))
colnames(listall) <- "Org"
listall$merge <-1
#main structure  for building the square matrix
DS2 <- sqldf("select a.org, b.org as org1
from listall a, listall b
on 1=1
")
lvl <- unique(DS2$org1)
levels(DS2$Org) <- lvl
#covert org1 from char to factor
DS2$org1 <- as.factor(DS2$org1)
levels(DS2$org1) <- lvl
names(Agg3)<-names(Agg1)
names(Agg4) <- names(Agg1)
names(Agg5) <- names(Agg1)
mainds <- rbind(Agg1, Agg3, Agg4, Agg5)
cohortseq <- unique(mainds$GRADUATING_COHORT)
#for all choices, all five graduating cohort together
DS2_2011_15 <- sqldf("select  a.org, a.org1, (case when b.count is null then 0 else b.count end) as count
from DS2 a
left join mainds b
on a.org=COLLEGE_DEGREE_NAME and a.org1=COLLEGE_FIRST_NAME  ")
xtb_2011_15 <- xtabs(count ~ Org + org1,data=DS2_2011_15)
#all five graduating cohorts from 2011-12 to 2015-16
vec_2011_15<-vector()
for(i in  seq(nrow(xtb_2011_15))) {
x<-c(xtb_2011_15[nrow(xtb_2011_15)+1-i,])
names(x)<-NULL
vec_2011_15<-rbind(x,vec_2011_15)
}
#loop through each graduating cohort
vec <- list("All"=vec_2011_15)
for (j in cohortseq){
mds_2009 <- mainds%>% filter(GRADUATING_COHORT==j)
DS2_2009 <- sqldf("select  a.org, a.org1, (case when b.count is null then 0 else b.count end) as count
from DS2 a
left join mds_2009 b
on  a.org=COLLEGE_DEGREE_NAME and a.org1=COLLEGE_FIRST_NAME  ")
xtb_2009 <- xtabs(count ~ Org + org1,data=DS2_2009)
vec_2009<-vector()
for(i in  seq(nrow(xtb_2009))) {
x<-c(xtb_2009[nrow(xtb_2009)+1-i,])
names(x)<-NULL
vec_2009<-rbind(x,vec_2009)
curlist <- list(vec_2009)
names(curlist) <- paste(substr(j,1,4), substr(j,8,9), sep = "-")
}
vec <- c(vec,curlist)
}
#region
coll <- unique(DS1$coll)
regionnum <- sapply(coll, function(x){ which(lvl== x)-1})
names(regionnum) <- NULL
names <- lvl
list <- list("names"=names, "regions"=regionnum, "matrix"=vec)
require(RJSONIO)
jsonOut<-toJSON(list)
#cat(jsonOut)
sink(paste('data',k, '.json', collapse ='', sep=""))
cat(jsonOut)
sink()
}
degrcoll <- unique(PAG$COLLEGE_DEGREE)
#loop through each degree college
for (k in degrcoll){
data <- PAG[PAG$COLLEGE_DEGREE==k,]
#concate to prevent same character
data$COLLEGE_FIRST_NAME <- paste(data$COLLEGE_FIRST, data$COLLEGE_FIRST_NAME, sep = "-")
data$MAJOR_NAME_FIRST <- paste(data$MAJOR_FIRST_SEMESTER, data$MAJOR_NAME_FIRST, sep = "-")
data$COLLEGE_DEGREE_NAME <- paste(data$COLLEGE_DEGREE, data$COLLEGE_DEGREE_NAME, sep = "-")
data$MAJOR_NAME_DEGREE <- paste(data$MAJOR_DEGREE, data$MAJOR_NAME_DEGREE, sep = "-")
#aggregation
library(dplyr)
Agg1 <- data %>% group_by(GRADUATING_COHORT, COLLEGE_FIRST_NAME,COLLEGE_DEGREE_NAME ) %>% summarise(count=n())
Agg2 <- data %>% group_by(GRADUATING_COHORT, COLLEGE_FIRST_NAME,COLLEGE_DEGREE_NAME, MAJOR_NAME_FIRST,  MAJOR_NAME_DEGREE) %>% summarise(count=n())
Agg3 <- data %>% group_by(GRADUATING_COHORT,  MAJOR_NAME_FIRST,  MAJOR_NAME_DEGREE) %>% summarise(count=n())
Agg4 <- data %>% group_by(GRADUATING_COHORT, COLLEGE_FIRST_NAME,  MAJOR_NAME_DEGREE) %>% summarise(count=n())
Agg5 <- data %>% group_by(GRADUATING_COHORT, MAJOR_NAME_FIRST,  COLLEGE_DEGREE_NAME) %>% summarise(count=n())
#gather all college and major from 2 time points
DS1<- sqldf("select distinct   COLLEGE_DEGREE_NAME as coll,  MAJOR_NAME_DEGREE as mjr
from Agg2
union
select distinct COLLEGE_FIRST_NAME , MAJOR_NAME_FIRST
from Agg2")
#for each college, build college following by majors within that college list
t<- split(DS1, DS1$coll)
listf <- function(x){ c(unique(x$coll),x$mjr)}
test <- sapply(t, listf)
listall <- as.data.frame(do.call(c,test))
colnames(listall) <- "Org"
listall$merge <-1
#main structure  for building the square matrix
DS2 <- sqldf("select a.org, b.org as org1
from listall a, listall b
on 1=1
")
lvl <- unique(DS2$org1)
levels(DS2$Org) <- lvl
#covert org1 from char to factor
DS2$org1 <- as.factor(DS2$org1)
levels(DS2$org1) <- lvl
names(Agg3)<-names(Agg1)
names(Agg4) <- names(Agg1)
names(Agg5) <- names(Agg1)
mainds <- rbind(Agg1, Agg3, Agg4, Agg5)
cohortseq <- unique(mainds$GRADUATING_COHORT)
#for all choices, all five graduating cohort together
DS2_2011_15 <- sqldf("select  a.org, a.org1, (case when b.count is null then 0 else b.count end) as count
from DS2 a
left join mainds b
on a.org=COLLEGE_DEGREE_NAME and a.org1=COLLEGE_FIRST_NAME  ")
xtb_2011_15 <- xtabs(count ~ Org + org1,data=DS2_2011_15)
#all five graduating cohorts from 2011-12 to 2015-16
vec_2011_15<-vector()
for(i in  seq(nrow(xtb_2011_15))) {
x<-c(xtb_2011_15[nrow(xtb_2011_15)+1-i,])
names(x)<-NULL
vec_2011_15<-rbind(x,vec_2011_15)
}
#loop through each graduating cohort
vec <- list("All"=vec_2011_15)
for (j in cohortseq){
mds_2009 <- mainds%>% filter(GRADUATING_COHORT==j)
DS2_2009 <- sqldf("select  a.org, a.org1, (case when b.count is null then 0 else b.count end) as count
from DS2 a
left join mds_2009 b
on  a.org=COLLEGE_DEGREE_NAME and a.org1=COLLEGE_FIRST_NAME  ")
xtb_2009 <- xtabs(count ~ Org + org1,data=DS2_2009)
vec_2009<-vector()
for(i in  seq(nrow(xtb_2009))) {
x<-c(xtb_2009[nrow(xtb_2009)+1-i,])
names(x)<-NULL
vec_2009<-rbind(x,vec_2009)
curlist <- list(vec_2009)
names(curlist) <- paste(substr(j,1,4), substr(j,8,9), sep = "-")
}
vec <- c(vec,curlist)
}
#region
coll <- unique(DS1$coll)
regionnum <- sapply(coll, function(x){ which(lvl== x)-1})
names(regionnum) <- NULL
names <- lvl
list <- list("names"=names, "regions"=regionnum, "matrix"=vec)
require(RJSONIO)
jsonOut<-toJSON(list)
#cat(jsonOut)
sink(paste('data',k, '.json', collapse ='', sep=""))
cat(jsonOut)
sink()
}
?gl
gl(4,4)
f<-gl(4,4)
str(f)
summarise(f)
summary(f)
?dnorm
pnorm(0.5,mean=2, sd=2)
pnorm(0.5,mean=2, sd=1)
pnorm(0.5,mean=1, sd=1)
set.seed(20)
x<- rnorm(100)
e <- rnorm(100,0,2)
y<-0.5+2*x+e
summary(y)
plot(x,y)
set.seed(10)
x<- rbinom(100,1,0.5)
e <- rnorm(100,0,2)
y<-0.5+2*x+e
summary(y)
plot(x,y)
set.seed(1)
x<-rnorm(100)
log.mu <- 0.5+0.3*x
y<- rpois(100,exp(log.mu))
summary(y)
plot(x,y)
library(swirls)
library(swirl)
swirl()
bye
0
info()
bye
bye()
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(planter,10)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4, replace = TRUE)
sample(1:6,4, replace = TRUE)
sample(1:20)
sample(1:20,10)
LETTERS
sample(LETTERS)
flips<-sample(c(0,1),100, replace=TRUE, prob = c(0.3,0.7))
flips
sum(flips==1)
sum(flips)
?rbinom
rbinom(1,size=100, prob = 0.7)
flips2<- rbinom(100,prob = 0.7)
flips2<- rbinom(100,size=100,prob = 0.7)
flips2<- rbinom(100,size=1,prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,100,25)
rpois(5,10)
my_pois <- replicate(100, rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed,y=cars$dist)
plot(y=cars$speed,x=cars$dist)
plot(x=cars$speed,y=cars$dist, xlab = "Speed")
plot(x=cars$speed,y=cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x=cars$speed,y=cars$dist,  ylab = "Stopping Distance")
plot(x=cars$speed,y=cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x=cars$speed,y=cars$dist, main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim=c(10,15))
plot(cars, pch=2)
data("mtcars")
data(mtcars)
?boxplot
boxplot(mpg~cyl,data=mtcars)
hist(mtcars$mpg)
shiny::runApp('S:/Institutional Research/Chen/visualdev/radar chart')
shiny::runApp('S:/Institutional Research/Chen/visualdev/radar chart')
library(radarchart)
?chartJSRadarOutput
shiny::runApp('S:/Institutional Research/Chen/visualdev/radar chart')
shiny::runApp('S:/Institutional Research/Chen/visualdev/radar chart')
chartJSRadar(scores=skills)
chartJSRadar(scores=skills)
?selectInput
shiny::runApp('S:/Institutional Research/Chen/visualdev/radar chart')
head(mtcars)
k <- mtcars[1:2,]
k
shiny::runApp('S:/Institutional Research/Chen/visualdev/radar chart')
k
dat <- k
as.vector(dat[1,])
data.frame("Label"=colnames(dat),
as.vector(dat[1,]))
k[1,]
as.vector(k[1,])
matrix(as.vector(k[1,]),11,1)
matrix(as.vector(dat[1,]),11,1)
data.frame(matrix( "Label"=colnames(dat),as.vector(dat[1,]),11,1),matrix(as.vector(dat[2,]),11,1))
data.frame(matrix(as.vector(dat[1,]),11,1),matrix(as.vector(dat[2,]),11,1))
data.frame(matrix(colnames(dat),11,1),matrix(as.vector(dat[1,]),11,1),matrix(as.vector(dat[2,]),11,1))
shiny::runApp('S:/Institutional Research/Chen/visualdev/radar chart')
